class ImageRecommender:
    def __init__(self, image_dir: str, feature_dir: str):
        self.image_dir = Path(image_dir)
        self.feature_dir = Path(feature_dir)
        self.feature_dir.mkdir(exist_ok=True)
        
        # Initialize FAISS index
        self.feature_dim = 1152  # SigLIP feature dimension
        self.index = faiss.IndexFlatL2(self.feature_dim)
        
        # Load model
        self.model = timm.create_model('vit_so400m_patch14_siglip_384', pretrained=True)
        self.model.eval()
        
        # Store paths and mappings
        self.image_paths = []
        self.path_to_idx = {}
        self.color_histograms = {}
        
    def extract_color_histogram(self, image_path: str) -> np.ndarray:
        """Extract color histogram from image."""
        img = cv2.imread(str(image_path))
        img = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
        hist = cv2.calcHist([img], [0, 1, 2], None, [8, 8, 8], 
                           [0, 180, 0, 256, 0, 256])
        hist = cv2.normalize(hist, hist).flatten()
        return hist
    
    def extract_vit_features(self, image_path: str) -> np.ndarray:
        """Extract features using ViT-SigLIP model."""
        image = Image.open(image_path).convert('RGB')
        # Preprocess image according to SigLIP requirements
        transform = timm.data.transforms_factory.create_transform(
            input_size=384,
            crop_pct=1.0,
            mean=(0.5, 0.5, 0.5),
            std=(0.5, 0.5, 0.5)
        )
        img_tensor = transform(image).unsqueeze(0)
        
        with torch.no_grad():
            features = self.model.forward_features(img_tensor)
            features = features.mean(dim=1).numpy()
        
        return features
    
    def process_and_store_features(self):
        """Process all images and store their features."""
        print("Processing images and extracting features...")
        
        # Get all image paths
        image_files = [f for f in self.image_dir.glob("**/*") 
                      if f.suffix.lower() in {'.jpg', '.jpeg', '.png'}]
        
        for idx, image_path in enumerate(image_files):
            rel_path = str(image_path.relative_to(self.image_dir))
            self.image_paths.append(rel_path)
            self.path_to_idx[rel_path] = idx
            
            # Extract and store color histogram
            hist = self.extract_color_histogram(str(image_path))
            self.color_histograms[rel_path] = hist
            
            # Extract and add ViT features to FAISS index
            features = self.extract_vit_features(str(image_path))
            self.index.add(features)
        
        # Save processed data
        with open(self.feature_dir / 'metadata.pkl', 'wb') as f:
            pickle.dump({
                'image_paths': self.image_paths,
                'path_to_idx': self.path_to_idx,
                'color_histograms': self.color_histograms
            }, f)
        
        # Save FAISS index
        faiss.write_index(self.index, str(self.feature_dir / 'image_features.index'))
        print(f"Processed {len(image_files)} images")
    
    def load_stored_features(self):
        """Load previously stored features."""
        # Load metadata
        with open(self.feature_dir / 'metadata.pkl', 'rb') as f:
            data = pickle.load(f)
            self.image_paths = data['image_paths']
            self.path_to_idx = data['path_to_idx']
            self.color_histograms = data['color_histograms']
        
        # Load FAISS index
        self.index = faiss.read_index(str(self.feature_dir / 'image_features.index'))
    
    def find_similar_images(self, query_image_path: str, 
                          color_filter: bool = False, 
                          color_threshold: float = 0.5,
                          num_results: int = 20) -> List[str]:
        """Find similar images using both feature similarity and color filtering."""
        # Extract query features
        query_features = self.extract_vit_features(query_image_path)
        query_hist = self.extract_color_histogram(query_image_path)
        
        # Search in FAISS index
        D, I = self.index.search(query_features, len(self.image_paths))
        similar_paths = [self.image_paths[idx] for idx in I[0]]
        
        if color_filter:
            # Filter by color similarity
            filtered_paths = []
            for path in similar_paths:
                hist = self.color_histograms[path]
                similarity = cv2.compareHist(
                    query_hist.astype(np.float32),
                    hist.astype(np.float32),
                    cv2.HISTCMP_CORREL
                )
                if similarity > color_threshold:
                    filtered_paths.append(path)
            
            return filtered_paths[:num_results]
        
        return similar_paths[:num_results]

    def filter_by_color(self, query_image_path: str,
                       similarity_filter: bool = False,
                       similarity_threshold: float = 0.7,
                       num_results: int = 20) -> List[str]:
        """Filter images by color, optionally with similarity filtering."""
        query_hist = self.extract_color_histogram(query_image_path)
        
        # Get color similarities for all images
        similar_paths = []
        for path in self.image_paths:
            hist = self.color_histograms[path]
            similarity = cv2.compareHist(
                query_hist.astype(np.float32),
                hist.astype(np.float32),
                cv2.HISTCMP_CORREL
            )
            similar_paths.append((path, similarity))
        
        # Sort by color similarity
        similar_paths.sort(key=lambda x: x[1], reverse=True)
        
        if similarity_filter:
            # Extract query features and filter by feature similarity
            query_features = self.extract_vit_features(query_image_path)
            D, I = self.index.search(query_features, len(self.image_paths))
            similar_feature_paths = set(self.image_paths[idx] for idx in I[0][:int(len(I[0])*similarity_threshold)])
            
            filtered_paths = [(path, sim) for path, sim in similar_paths 
                            if path in similar_feature_paths]
            return [path for path, _ in filtered_paths[:num_results]]
        
        return [path for path, _ in similar_paths[:num_results]]